name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Setup SSH
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ec2-18-226-165-114.us-east-2.compute.amazonaws.com
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        env:
          EC2_HOST: ec2-18-226-165-114.us-east-2.compute.amazonaws.com
          EC2_USERNAME: ubuntu
        run: |
          if ! ssh -i ~/.ssh/deploy_key -o BatchMode=yes -o ConnectTimeout=5 $EC2_USERNAME@$EC2_HOST echo "SSH connection successful"; then
            echo "Failed to establish SSH connection"
            exit 1
          fi

      - name: Copy JAR to EC2
        env:
          EC2_HOST: ec2-18-226-165-114.us-east-2.compute.amazonaws.com
          EC2_USERNAME: ubuntu
        run: |
          if ! scp -i ~/.ssh/deploy_key target/kura-*.jar $EC2_USERNAME@$EC2_HOST:~/app.jar; then
            echo "Failed to copy JAR file to EC2"
            exit 1
          fi
          echo "JAR file successfully copied to EC2"

      - name: Stop existing application
        env:
          EC2_HOST: ec2-18-226-165-114.us-east-2.compute.amazonaws.com
          EC2_USERNAME: ubuntu
        run: |
          ssh -i ~/.ssh/deploy_key $EC2_USERNAME@$EC2_HOST '
            echo "Checking for existing application..."
            if pid=$(pgrep -f app.jar); then
              echo "Found application running with PID: $pid"
              echo "Attempting to stop gracefully..."
              kill -15 $pid || true
              sleep 5
          
              if pgrep -f app.jar > /dev/null; then
                echo "Application still running, stopping forcefully..."
                kill -9 $(pgrep -f app.jar) || true
              else
                echo "Application stopped successfully"
              fi
            else
              echo "No existing application found running"
            fi
          '

      - name: Start application
        env:
          EC2_HOST: ec2-18-226-165-114.us-east-2.compute.amazonaws.com
          EC2_USERNAME: ubuntu
        run: |
          ssh -i ~/.ssh/deploy_key $EC2_USERNAME@$EC2_HOST '
            echo "Starting new application..."
            cd ~
            nohup java \
              -Xmx512m \
              -XX:+HeapDumpOnOutOfMemoryError \
              -XX:HeapDumpPath=/home/ubuntu/heapdump.hprof \
              -jar app.jar > app.log 2>&1 &
          
            # Make sure the process started
            sleep 5
            if pgrep -f app.jar > /dev/null; then
              echo "Application process started successfully"
            else
              echo "Application failed to start. Last few lines of log:"
              tail -n 50 app.log
              exit 1
            fi
          '

      - name: Verify application health
        env:
          EC2_HOST: ec2-18-226-165-114.us-east-2.compute.amazonaws.com
          EC2_USERNAME: ubuntu
        run: |
          ssh -i ~/.ssh/deploy_key $EC2_USERNAME@$EC2_HOST '
            echo "Verifying application health..."
            for i in {1..30}; do
              if curl -s http://localhost:8080/actuator/health 2>&1 | grep -q "UP"; then
                echo "Application is healthy and ready to serve requests"
                exit 0
              fi
              echo "Waiting for application to become healthy... ($i/30)"
              sleep 2
            done
          
            echo "Application failed to become healthy. Last few lines of log:"
            tail -n 50 app.log
            exit 1
          '